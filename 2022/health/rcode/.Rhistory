ACList$Administrative.Counties.2019 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("D├║n Laoghaire","Dun Laoghaire", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("'","", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("&","and", ACList$Administrative.Counties.2019)
#Lookup table from ED to AC and replacing of special chars
EDACLookup <- as.data.frame(read.csv(paste0(InputFilesLoc,"/EDACLookupFinal.csv")))
library(tidyverse)
library(stringr)
library(tidyr)
library(dplyr)
library(lubridate)
library(stringi)
#set up working directory, input and output folders
RootWD <- setwd(getwd())
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
SAPSED <- read.csv(paste0(InputFilesLoc,"/SAPS2022/SAPS_2022_CSOED3270923.csv"), header = T)
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
library(highcharter)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
EDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/"))$CSO.Electoral.Divisions.2022)
EDList <- as.data.frame(EDList)
colnames(EDList)[1] <- "ED"
#Create list of ED GUIDs
GUIDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/"), use.codes = T)$CSO.Electoral.Divisions.2022)
GUIDList <- as.data.frame(GUIDList)
colnames(GUIDList)[1] <- "GUID"
#Create EDs df W GUIDs and remove special chars
EDWGUID <- EDList
EDWGUID$GUID <- GUIDList$GUID
EDWGUID$ED <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",EDWGUID$ED)
EDWGUID$ED <- gsub("D├║n Laoghaire","Dun Laoghaire", EDWGUID$ED)
EDWGUID$ED <- gsub("'","", EDWGUID$ED)
EDWGUID$ED <- gsub("&","and", EDWGUID$ED)
EDWGUID$ED  <- gsub("M├│r","Mor", EDWGUID$ED)
#List of ACs and associated GUIDs
ACListStart <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/"))
ACGUIDList <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/"),use.codes=T)
ACListStart$GUID <- ACGUIDList$Administrative.Counties.2019
ACList <- ACListStart%>%dplyr::select(Administrative.Counties.2019, GUID)
ACList <- ACList[!duplicated(ACList[,c("Administrative.Counties.2019", "GUID")]),]
# Remove special chars in AC Names
ACList$Administrative.Counties.2019 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("D├║n Laoghaire","Dun Laoghaire", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("'","", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("&","and", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("M├│r","Mor", ACList$Administrative.Counties.2019)
#Lookup table from ED to AC and replacing of special chars
EDACLookup <- as.data.frame(read.csv(paste0(InputFilesLoc,"/EDACLookupFinal.csv")))%>%select(ED_GUID,AC)
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
library(highcharter)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
EDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/"))$CSO.Electoral.Divisions.2022)
#Create Lists of EDs
EDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.PxAPIv1/en/88/SM2022T1/SAP2022T1T1AED"))$CSO.Electoral.Divisions.2022)
#Read pxStat table for ACs (Removing Ireland as this is in the ED table and change geotitle to ED to be able to bind correctly)
PopSourceTableAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/")
#read the pxstat file for EDs
PopSourceTable.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/JSON-stat/2.0/en")
#read the pxstat file for EDs
PopSourceTable.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/en")
PopSourceTable <- as.data.frame(PopSourceTable.px)
PopSourceTable
#Read pxStat table for ACs (Removing Ireland as this is in the ED table and change geotitle to ED to be able to bind correctly)
PopSourceTableAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/en")
#Create Lists of EDs
EDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/en"))$CSO.Electoral.Divisions.2022)
#Create list of ED GUIDs
GUIDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/en"), use.codes = T)$CSO.Electoral.Divisions.2022)
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
library(highcharter)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
EDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/en"))$CSO.Electoral.Divisions.2022)
EDList <- as.data.frame(EDList)
colnames(EDList)[1] <- "ED"
#Create list of ED GUIDs
GUIDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/en"), use.codes = T)$CSO.Electoral.Divisions.2022)
GUIDList <- as.data.frame(GUIDList)
colnames(GUIDList)[1] <- "GUID"
#Create EDs df W GUIDs and remove special chars
EDWGUID <- EDList
EDWGUID$GUID <- GUIDList$GUID
EDWGUID$ED <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",EDWGUID$ED)
EDWGUID$ED <- gsub("D├║n Laoghaire","Dun Laoghaire", EDWGUID$ED)
EDWGUID$ED <- gsub("'","", EDWGUID$ED)
EDWGUID$ED <- gsub("&","and", EDWGUID$ED)
EDWGUID$ED  <- gsub("M├│r","Mor", EDWGUID$ED)
#List of ACs and associated GUIDs
ACListStart <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/en"))
ACGUIDList <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/en"),use.codes=T)
ACListStart$GUID <- ACGUIDList$Administrative.Counties.2019
ACList <- ACListStart%>%dplyr::select(Administrative.Counties.2019, GUID)
ACList <- ACList[!duplicated(ACList[,c("Administrative.Counties.2019", "GUID")]),]
# Remove special chars in AC Names
ACList$Administrative.Counties.2019 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("D├║n Laoghaire","Dun Laoghaire", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("'","", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("&","and", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("M├│r","Mor", ACList$Administrative.Counties.2019)
#Lookup table from ED to AC and replacing of special chars
EDACLookup <- as.data.frame(read.csv(paste0(InputFilesLoc,"/EDACLookupFinal.csv")))%>%select(ED_GUID,AC)
##NOTE DEATHS FOR 2016 == Q2,Q3,Q4
library(plyr)
library(dplyr)
library(haven)
library(lubridate)
install.packages("methods")
##NOTE DEATHS FOR 2016 == Q2,Q3,Q4
library(plyr)
library(dplyr)
library(haven)
library(lubridate)
install.packages("lubridate")
##NOTE DEATHS FOR 2016 == Q2,Q3,Q4
library(plyr)
library(dplyr)
library(haven)
library(lubridate)
library(ggplot2)
##NOTE DEATHS FOR 2016 == Q2,Q3,Q4
library(plyr)
library(dplyr)
library(haven)
library(lubridate)
install.packages("methods",type="win.binary")
library(plyr)
library(dplyr)
library(haven)
library(lubridate)
library(knitr)
library(htmltools)
library(formattable)
library(scales)
library(kableExtra)
library(flextable)
####################THE FOLLOWING CODE NOT TO BE CHANGED #######################################################################################################
AnalysisType <- "Full"
# AnalysisType <- "Sample"
set.seed(1234)
# When using relative filepaths in this way, the initial file needs to be opened in a new session
# in R for the Root Working Directory to be correct
RootWD <- getwd()
InputFilesLoc <- file.path(RootWD, "Inputs")
OutputFilesLoc <- file.path(RootWD, "Outputs")
InputFilesLoc
library(stringr)
# Define the folder containing the HTML files
FolderPath <- "//CMADMIN01/BigDataDev/Projects/HealthProfiling/CompletedReports/HTMLExMapsEdit"
library(stringr)
# Define the folder containing the HTML files
FolderPath <- "//CMADMIN01/BigDataDev/Projects/HealthProfiling/CompletedReports/HTMLExMapsEdit"
# Define the patterns to replace text between
StartPattern <- "<script src=\""
EndPattern <- "/"
ReplacementText <- "../resources"  # Text to replace with
# Get list of HTML files in the folder
HtmlFiles <- list.files(FolderPath, pattern = "\\.html$", full.names = TRUE)
HtmlFiles
library(stringr)
# Define the folder containing the HTML files
FolderPath <- "//CMADMIN01/BigDataDev/Projects/HealthProfiling/CompletedReports/HTMLExMapsEdit"
# Define the patterns to replace text between
StartPattern <- "<script src=\""
EndPattern <- "/"
ReplacementText <- "../resources"  # Text to replace with
# Get list of HTML files in the folder
HtmlFiles <- list.files(FolderPath, pattern = "\\.html$", full.names = TRUE)
# Loop over each HTML file
for (File in HtmlFiles) {
# Read the HTML content as lines
HtmlContent <- readLines(File, warn = FALSE)
# Separate the first 240 lines from the rest
FirstPart <- HtmlContent[1:240]
RemainingPart <- if (length(HtmlContent) > 240) HtmlContent[241:length(HtmlContent)] else character(0)
# Collapse the first part into a single string for pattern matching
FirstPartText <- paste(FirstPart, collapse = "\n")
# Replace text between the start pattern and the first forward slash
ModifiedFirstPart <- str_replace(FirstPartText,
paste0("(?<=", StartPattern, ").*?(?=/)"),
ReplacementText)
# Split the modified first part back into lines
ModifiedFirstPartLines <- strsplit(ModifiedFirstPart, "\n")[[1]]
# Combine the modified first part and remaining part
NewContent <- c(ModifiedFirstPartLines, RemainingPart)
# Write the modified content back to the same file
writeLines(NewContent, File)
}
library(stringr)
# Define the folder containing the HTML files
FolderPath <- "//CMADMIN01/BigDataDev/Projects/HealthProfiling/CompletedReports/HTMLExMapsEdit"
# Define the patterns to replace text between
StartPattern <- "<script src=\""
EndPattern <- "/"
ReplacementText <- "../resources"  # Text to replace with
# Get list of HTML files in the folder
HtmlFiles <- list.files(FolderPath, pattern = "\\.html$", full.names = TRUE)
# Loop over each HTML file
for (File in HtmlFiles) {
# Read the HTML content as lines
HtmlContent <- readLines(File, warn = FALSE)
# Separate the first 240 lines from the rest
FirstPart <- HtmlContent[1:240]
RemainingPart <- if (length(HtmlContent) > 240) HtmlContent[241:length(HtmlContent)] else character(0)
# Collapse the first part into a single string for pattern matching
FirstPartText <- paste(FirstPart, collapse = "\n")
# Replace text between the start pattern and the first forward slash
ModifiedFirstPart <- str_replace_all(FirstPartText,
paste0("(?<=", StartPattern, ").*?(?=/)"),
ReplacementText)
# Split the modified first part back into lines
ModifiedFirstPartLines <- strsplit(ModifiedFirstPart, "\n")[[1]]
# Combine the modified first part and remaining part
NewContent <- c(ModifiedFirstPartLines, RemainingPart)
# Write the modified content back to the same file
writeLines(NewContent, File)
}
library(stringr)
FolderPath <- "//CMADMIN01/BigDataDev/Projects/HealthProfiling/CompletedReports/HTMLExMapsEdit"
StartPattern <- "<script src=\""
EndPattern <- "/"
ReplacementText <- "../resources"
StartPattern2 <- "<link href=\""
# Get list of HTML files in the folder
HtmlFiles <- list.files(FolderPath, pattern = "\\.html$", full.names = TRUE)
Counter <- 1
# Loop over each HTML file
for (File in HtmlFiles) {
HtmlContent <- readLines(File, warn = FALSE)
FirstPart <- HtmlContent[1:240]
RemainingPart <- if (length(HtmlContent) > 240) HtmlContent[241:length(HtmlContent)] else character(0)
FirstPartText <- paste(FirstPart, collapse = "\n")
ModifiedFirstPart <- str_replace_all(FirstPartText,
paste0("(?<=", StartPattern, ").*?(?=/)"),
ReplacementText)
ModifiedFirstPart2 <- str_replace_all(ModifiedFirstPart,
paste0("(?<=", StartPattern2, ").*?(?=/)"),
ReplacementText)
ModifiedFirstPartLines <- strsplit(ModifiedFirstPart2, "\n")[[1]]
NewContent <- c(ModifiedFirstPartLines, RemainingPart)
writeLines(NewContent, File)
print(paste0("Iteration ",Counter," complete (",round(Counter*100/length(HtmlFiles),1)))
Counter <- Counter+1
}
setwd("//CMADMIN01/BigDataDev/Projects/HealthProfiling/EdProfilesCloneFinal/edprofiles/2022/health/rcode")
setwd(RootWD)
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
library(highcharter)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
EDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/en"))$CSO.Electoral.Divisions.2022)
EDList <- as.data.frame(EDList)
colnames(EDList)[1] <- "ED"
#Create list of ED GUIDs
GUIDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/en"), use.codes = T)$CSO.Electoral.Divisions.2022)
GUIDList <- as.data.frame(GUIDList)
colnames(GUIDList)[1] <- "GUID"
#Create EDs df W GUIDs and remove special chars
EDWGUID <- EDList
EDWGUID$GUID <- GUIDList$GUID
EDWGUID$ED <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",EDWGUID$ED)
EDWGUID$ED <- gsub("D├║n Laoghaire","Dun Laoghaire", EDWGUID$ED)
EDWGUID$ED <- gsub("'","", EDWGUID$ED)
EDWGUID$ED <- gsub("&","and", EDWGUID$ED)
EDWGUID$ED  <- gsub("M├│r","Mor", EDWGUID$ED)
#List of ACs and associated GUIDs
ACListStart <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/en"))
ACGUIDList <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/en"),use.codes=T)
ACListStart$GUID <- ACGUIDList$Administrative.Counties.2019
ACList <- ACListStart%>%dplyr::select(Administrative.Counties.2019, GUID)
ACList <- ACList[!duplicated(ACList[,c("Administrative.Counties.2019", "GUID")]),]
# Remove special chars in AC Names
ACList$Administrative.Counties.2019 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("D├║n Laoghaire","Dun Laoghaire", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("'","", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("&","and", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("M├│r","Mor", ACList$Administrative.Counties.2019)
#Lookup table from ED to AC and replacing of special chars
EDACLookup <- as.data.frame(read.csv(paste0(InputFilesLoc,"/EDACLookupFinal.csv")))%>%select(ED_GUID,AC)
EDACLookup$AC <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire", EDACLookup$AC)
EDACLookup$AC <- gsub("D├║n Laoghaire","Dun Laoghaire", EDACLookup$AC)
EDACLookup$AC <- gsub("'","", EDACLookup$AC)
EDACLookup$AC <- gsub("&","and", EDACLookup$AC)
EDACLookup$AC <- gsub("M├│r","Mor", EDACLookup$AC)
# Create combined dataframe of EDs GUIDs and ACs
# also creates lower case names of EDs and ACs with dashes instead of spaces so they can be used for filenames
EDWGUIDAC <- merge(EDWGUID,EDACLookup, by.x = "GUID", by.y = "ED_GUID")
EDWGUIDAC$EDLC <- make.names(tolower(EDWGUIDAC$ED))
EDWGUIDAC$EDLC <- gsub(".","-",EDWGUIDAC$EDLC, fixed = T)
EDWGUIDAC$ACLC <- make.names(tolower(EDWGUIDAC$AC))
EDWGUIDAC$ACLC <- gsub(".","-",EDWGUIDAC$ACLC, fixed = T)
EDWGUIDAC$GUIDLC <- tolower(EDWGUIDAC$GUID)
#Create CSV For HTML Table and EDsearch tool with links to each file
CSVForHTML <- EDWGUIDAC%>%select(ED,GUID,AC,EDLC,ACLC,GUIDLC)
CSVForHTML$ReportNumber <- 1:nrow(CSVForHTML)
#add links for html and pdf reports
CSVForHTML$Report <- paste0("<a href=\"https://edprofiles.cso.ie/2022/health/html/",CSVForHTML$ReportNumber,"-",CSVForHTML$EDLC,"-ac-",CSVForHTML$ACLC,".html","\"", " target=\"_blank\"", " title=\"",CSVForHTML$ED," summary report\"", ">","HTML","</a>", "  ",
"<a href=\"https://cdn.jsdelivr.net/gh/CSOIreland/edprofiles@resources/2022/health/pdf/",CSVForHTML$ReportNumber,"-",CSVForHTML$EDLC,"-ac-",CSVForHTML$ACLC,".pdf","\"", " target=\"_blank\"", ", title=\"",CSVForHTML$ED," PDF Report\">","PDF","</a>"  )
CSVForHTML$Report <- gsub("--","-", CSVForHTML$Report)
CSVForHTMLToExport <- CSVForHTML%>%select(ED,AC,Report, GUID)%>%dplyr::rename("Electoral Division" = "ED", "Administrative County" = "AC")
write.csv(CSVForHTMLToExport, file = paste0(OutputFilesLoc, "/CSVForHTML.csv"), row.names = F)
# #sample dataset if running tests
#Sample <- sample(1:nrow(EDWGUIDAC),1)
#EDWGUIDAC <- EDWGUIDAC[Sample,]
# Read and Format PX Stat Files
source(paste0(getwd(),"/scripts/1_ReadAndFormatPXStat.R"))
# calculate SAPS Percentages
source(paste0(getwd(),"/scripts/2_SAPSPercentages.R"))
# create an empty list for errors, to be filled later
ErrorList <- list()
Indices <- which(EDWGUIDAC$AC == "South Dublin County Council"|EDWGUIDAC$AC == "Fingal County Council")
# Loop through every file in the process for every ED
for (i in Indices)  {
setwd(RootWD)
#skip to next controls whether an iteration should be skipped if there is an error(if SkipToNext == TRUE)
SkipToNext <- FALSE
tryCatch({
#Select the appropriate, ED, AC and map link
ED <- as.character(EDWGUIDAC$ED[i])
EDGUID <- as.character(EDWGUIDAC$GUID[i])
EDGUIDLC <- as.character(EDWGUIDAC$GUIDLC[i])
EDLC <- as.character(EDWGUIDAC$EDLC[i])
AC <- EDWGUIDAC$AC[i]
ACGUID <- ACList$GUID[ACList$Administrative.Counties.2019 == AC]
ACLC <- as.character(EDWGUIDAC$ACLC[i])
#Create a truncated version of ED so that tables and plots remain consistent
EDForTables <- str_trunc(ED, 25)
EDForTables <- str_replace_all(EDForTables, "[^[:alnum:]]\\,", " ")
EDName <- make.names(ED)
EDName <- gsub("\\.","-", EDName)
#Create a truncated version of AC so that tables and plots remain consistent
ACForTables <- str_trunc(AC, 25)
ACForTables <- str_replace_all(ACForTables, "[^[:alnum:]]\\,", " ")
ACForTablesShort <- str_trunc(AC, 15)
ACForTablesShort <- str_replace_all(ACForTablesShort , "[^[:alnum:]]\\,", " ")
ACName <- make.names(AC)
ACName <-  gsub("\\.","-", ACName)
# Title for the markdown/html
TitleForRMD <- paste0("Electoral Division Health Profile - ", ED)
# link to map for ED
EDMapLink <- paste0("../inputs/exportededmaps/",EDGUID,".jpg")
# Run through Subfiles
source(paste0(getwd(),"/scripts/3_Population.R"))
source(paste0(getwd(),"/scripts/4_Carers.R"))
source(paste0(getwd(),"/scripts/5_GeneralHealth.R"))
source(paste0(getwd(),"/scripts/6_Disability.R"))
source(paste0(getwd(),"/scripts/7_Smoking.R"))
source(paste0(getwd(),"/scripts/8_Education.R"))
source(paste0(getwd(),"/scripts/9_PrincipleEconomicStatus.R"))
source(paste0(getwd(),"/scripts/10_Families.R"))
source(paste0(getwd(),"/scripts/11_Birthplace.R"))
source(paste0(getwd(),"/scripts/12_Volunteering.R"))
source(paste0(getwd(),"/scripts/13_SocialClass.R"))
source(paste0(getwd(),"/scripts/14_Households.R"))
source(paste0(getwd(),"/scripts/15_RenewableEnergy.R"))
source(paste0(getwd(),"/scripts/16_Travel.R"))
source(paste0(getwd(),"/scripts/17_KeyPointsAndOtherCalcs.R"))
source(paste0(getwd(),"/scripts/18_SAPS.R"))
setwd(paste0(getwd(),"/scripts"))
#Create the .RNW file using sweave for compiling
Sweave("HealthProfileTemplate.Rnw",output=gsub("--","-",paste0(i,"-",EDLC,"-ac-",ACLC,".tex")))
#Compile the .rnw with Latex
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"-ac-",ACLC,".tex")))
tools::texi2pdf(gsub("--","-",paste0(i,"-",EDLC,"-ac-",ACLC,".tex")))
#EDProfile pdf Link for RMD
EDLinkPDF<- paste0("<font size=\"5\"><a href=\"https://cdn.jsdelivr.net/gh/CSOIreland/edprofiles@resources/2022/health/pdf/",i,"-",EDLC,"-ac-",ACLC,".pdf\""," style=\"text-decoration: none\">A more detailed and print friendly pdf profile - with accompanying tables - is available here.</a></font>")
EDLinkPDF <- gsub("--","-", EDLinkPDF)
#render R Markdown
rmarkdown::render("HealthProfileMarkdown.Rmd", output_file =gsub("--","-",paste0(i,"-",EDLC,"-ac-",ACLC,".html")))
# print progress
print(paste0("Iteration ", i, " of ", nrow(EDWGUIDAC), " complete(",round(i*100/nrow(EDWGUIDAC),1),"%)"))
# log errors
}, error = function(e) {
ErrorMessage <- paste0("Error in Iteration _", i ,"_: for ED -",ED,"- ", conditionMessage(e))
ErrorList <<- c(ErrorList,ErrorMessage)
SkipToNext <<-TRUE
}
)
#if SkipToNext is TRUE, skip to next iteration
if(SkipToNext) { next }
}
# Create the ED search map
source(paste0(getwd(),"/19_EDSearchTool.R"))
print(ErrorList)
#write a csv of errors
write.csv(as.data.frame(ErrorList), file = paste0(OutputFilesLoc,"/ErrorList.csv"))
#setWD so if rerunning runs correctly
setwd(RootWD)
###Run was randomly crashing before error list was saved so had to identify runs that didn't complete below
##List files
FileListPDF <- as.data.frame(list.files(paste0("../reports/pdf/")))
FileListHTML <- as.data.frame(list.files(paste0("../reports/html/")))
#List HTML only
colnames(FileListHTML) <- "FileName"
#Extract file numbers from filenames
FileNumberList <- as.numeric(sub("-.*","",FileListHTML$FileName))
#compare numbers completed with entire set that should be completed to identify failed runs
FullSequence <- seq(1, 3420)
MissingHTMLFiles <- setdiff(FullSequence, FileNumberList)
# Do the same for PDFs
colnames(FileListPDF) <- "FileName"
FileNumberListPDF <- as.numeric(sub("-.*","",FileListPDF$FileName))
MissingPDFFiles <- setdiff(FullSequence, FileNumberListPDF)
# join missing pdfs and htmls
UnionMissingFiles <- union(MissingHTMLFiles, MissingPDFFiles)
str(MissingPDFFiles)
#investigate missing
EDWGUIDACMissing <- EDWGUIDAC[UnionMissingFiles,]
library(stringr)
FolderPath <- "//CMADMIN01/BigDataDev/Projects/HealthProfiling/CompletedReports/HTMLExMapsEdit"
ScriptsPath <- "//CMADMIN01/BigDataDev/Projects/HealthProfiling/EdProfilesCloneFinal/edprofiles/2022/health/rcode/scripts"
#
HtmlFilesScripts <- list.files(ScriptsPath, pattern = "\\.html$", full.names = TRUE)
#
file.copy(from=HtmlFilesScripts, to=FolderPath ,
overwrite = TRUE, recursive = FALSE,
copy.mode = TRUE)
HtmlFiles <- list.files(FolderPath, pattern = "\\.html$", full.names = TRUE)
StartPattern <- "<script src=\""
EndPattern <- "/"
ReplacementText <- "../resources"
StartPattern2 <- "<link href=\""
# Get list of HTML files in the folder
Counter <- 1
# Loop over each HTML file
for (File in HtmlFiles) {
HtmlContent <- readLines(File, warn = FALSE)
FirstPart <- HtmlContent[1:240]
RemainingPart <- if (length(HtmlContent) > 240) HtmlContent[241:length(HtmlContent)] else character(0)
FirstPartText <- paste(FirstPart, collapse = "\n")
ModifiedFirstPart <- str_replace_all(FirstPartText,
paste0("(?<=", StartPattern, ").*?(?=/)"),
ReplacementText)
ModifiedFirstPart2 <- str_replace_all(ModifiedFirstPart,
paste0("(?<=", StartPattern2, ").*?(?=/)"),
ReplacementText)
ModifiedFirstPartLines <- strsplit(ModifiedFirstPart2, "\n")[[1]]
NewContent <- c(ModifiedFirstPartLines, RemainingPart)
writeLines(NewContent, File)
print(paste0("Iteration ",Counter," complete (",round(Counter*100/length(HtmlFiles),1),"%)"))
Counter <- Counter+1
}
