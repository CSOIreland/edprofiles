# filter only both sexes as that is all we are interested in here
EduSourceTable <- EduSourceTable%>%filter(Sex == "Both Sexes")
############################PRINCIPLE ECONOMIC STATUS################################
# REad Pxstat tables
PESSource.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T8T1ED/PX/2013/")
PESSource <- as.data.frame(PESSource.px)
PESSourceAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T8T1CTY/PX/2013/")
PESSourceAC <- as.data.frame(PESSourceAC.px)
# Electoral Division as character for correct join
PESSource$CSO.Electoral.Divisions.2022 <- as.character(PESSource$CSO.Electoral.Divisions.2022)
# Rename Ireland State
PESSource$CSO.Electoral.Divisions.2022[PESSource$CSO.Electoral.Divisions.2022 == "Ireland"] <- "State"
# Rename AC geogrpahy so can be rbinded. also filter out Ireland as it is in the ED table
PESSourceAC <- PESSourceAC%>%dplyr::rename(CSO.Electoral.Divisions.2022 = "Administrative.Counties.2019")%>%filter(CSO.Electoral.Divisions.2022 !="Ireland")
#remove special chars from ac
PESSourceAC$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire|D├║n Laoghaire","Dun Laoghaire", PESSourceAC$CSO.Electoral.Divisions.2022)
#bind both tables and filter for both sexes as that is what we are interested in
PESSource <- rbind(PESSource, PESSourceAC)
#remove special chars etc
PESSource$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",PESSource$CSO.Electoral.Divisions.2022)
PESSource$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", PESSource$CSO.Electoral.Divisions.2022)
PESSource$CSO.Electoral.Divisions.2022 <- gsub("'","", PESSource$CSO.Electoral.Divisions.2022)
PESSource$CSO.Electoral.Divisions.2022 <- gsub("&","and", PESSource$CSO.Electoral.Divisions.2022)
PESSource <- PESSource%>%filter(Sex == "Both Sexes")
##############################FAMILIES#####################################
# read pxstat tables
FamSource.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T4T3ED/PX/2013/")
FamSource <- as.data.frame(FamSource.px)%>%dplyr::rename(CSO.Electoral.Divisions.2020 = "CSO.Electoral.Divisions.2022")
FamSourceAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T4T3CTY/PX/2013/")
#removing ireland as this is already in the EDtable
FamSourceAC <- as.data.frame(FamSourceAC.px)%>%dplyr::rename(CSO.Electoral.Divisions.2020  = "Administrative.Counties")%>%filter(CSO.Electoral.Divisions.2020!="Ireland")
# EDs as character for correct join
FamSource$CSO.Electoral.Divisions.2020 <- as.character(FamSource$CSO.Electoral.Divisions.2020)
#rename Ireland state
FamSource$CSO.Electoral.Divisions.2020[FamSource$CSO.Electoral.Divisions.2020 == "Ireland"] <- "State"
#Remove special chars in AC table
FamSourceAC$CSO.Electoral.Divisions.2020 <- gsub("Dâ”œâ•‘n Laoghaire|D├║n Laoghaire","Dun Laoghaire ", FamSourceAC$CSO.Electoral.Divisions.2020)
#bind both tables
FamSource <- rbind(FamSource,FamSourceAC)
#remove special chars etc
FamSource$CSO.Electoral.Divisions.2020 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",FamSource$CSO.Electoral.Divisions.2020)
FamSource$CSO.Electoral.Divisions.2020 <- gsub("D├║n Laoghaire","Dun Laoghaire", FamSource$CSO.Electoral.Divisions.2020)
FamSource$CSO.Electoral.Divisions.2020 <- gsub("'","", FamSource$CSO.Electoral.Divisions.2020)
FamSource$CSO.Electoral.Divisions.2020 <- gsub("&","and", FamSource$CSO.Electoral.Divisions.2020)
################################BIRTHPLACE########################################
#read pxstat tabls for ac and ED
BirthSource.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T2T1ED/PX/2013/")
BirthSource <- as.data.frame(BirthSource.px)%>%filter(Statistic == "Usually resident population by birthplace")
BirthSourceAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T2T1CTY/PX/2013/")
#removing ireland as this is already in the EDtable
BirthSourceAC<- as.data.frame(BirthSourceAC.px)%>%dplyr::rename(CSO.Electoral.Divisions.2022 = "Administrative.Counties")%>%filter(CSO.Electoral.Divisions.2022!="Ireland")%>%filter(Statistic == "Usually resident population by birthplace")
# ED as character for correct join
BirthSource$CSO.Electoral.Divisions.2022<-as.character(BirthSource$CSO.Electoral.Divisions.2022)
# rename Ireland to state
BirthSource$CSO.Electoral.Divisions.2022[BirthSource$CSO.Electoral.Divisions.2022 == "Ireland"] <- "State"
# replace special chars in ac
BirthSourceAC$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire|D├║n Laoghaire","Dun Laoghaire", BirthSourceAC$CSO.Electoral.Divisions.2022)
#bind both tables
BirthSource <- rbind(BirthSource,BirthSourceAC)
#remove special chars etc
BirthSource$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",BirthSource$CSO.Electoral.Divisions.2022)
BirthSource$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", BirthSource$CSO.Electoral.Divisions.2022)
BirthSource$CSO.Electoral.Divisions.2022 <- gsub("'","", BirthSource$CSO.Electoral.Divisions.2022)
BirthSource$CSO.Electoral.Divisions.2022 <- gsub("&","and", BirthSource$CSO.Electoral.Divisions.2022)
###############################VOLUNTEERING####################################
#REad ED and AC  table from PXSTat
VolunteersSourceTable.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T7T1ED/PX/2013/")
VolunteersSourceTable <- as.data.frame(VolunteersSourceTable.px)
VolunteersSourceTableAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T7T1CTY/PX/2013/")
#removing ireland as this is already in the EDtable
VolunteersSourceTableAC <- as.data.frame(VolunteersSourceTableAC.px)%>%dplyr::rename(CSO.Electoral.Divisions.2022 = "Administrative.Counties")%>%filter(CSO.Electoral.Divisions.2022!="Ireland")
#EDs as cahracter for correct join
VolunteersSourceTable$CSO.Electoral.Divisions.2022<- as.character(VolunteersSourceTable$CSO.Electoral.Divisions.2022)
#rename Ireland State
VolunteersSourceTable$CSO.Electoral.Divisions.2022[VolunteersSourceTable$CSO.Electoral.Divisions.2022 == "Ireland"] <- "State"
#Fix special characters in AC table
VolunteersSourceTableAC$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire |D├║n Laoghaire","Dun Laoghaire", VolunteersSourceTableAC$CSO.Electoral.Divisions.2022)
VolunteersSourceTable <- rbind(VolunteersSourceTable,VolunteersSourceTableAC)
#remove special chars etc
VolunteersSourceTable$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",VolunteersSourceTable$CSO.Electoral.Divisions.2022)
VolunteersSourceTable$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", VolunteersSourceTable$CSO.Electoral.Divisions.2022)
VolunteersSourceTable$CSO.Electoral.Divisions.2022 <- gsub("'","", VolunteersSourceTable$CSO.Electoral.Divisions.2022)
VolunteersSourceTable$CSO.Electoral.Divisions.2022 <- gsub("&","and", VolunteersSourceTable$CSO.Electoral.Divisions.2022)
#########################################SOCIAL CLASS##########################################
#REad ED and AC  table from PXSTat
SocialClassSourceTable.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T9T1ED/PX/2013/")
SocialClassSourceTable <- as.data.frame(SocialClassSourceTable.px)%>%filter(Sex == "Both Sexes")
SocialClassSourceTableAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T9T1CTY/PX/2013/")
#removing ireland as this is already in the EDtable
SocialClassSourceTableAC <- as.data.frame(SocialClassSourceTableAC.px)%>%dplyr::rename(CSO.Electoral.Divisions.2022 = "Administrative.Counties.2019")%>%filter(CSO.Electoral.Divisions.2022!="Ireland" & Sex == "Both Sexes")
#EDs as cahracter for correct join
SocialClassSourceTable$CSO.Electoral.Divisions.2022<- as.character(SocialClassSourceTable$CSO.Electoral.Divisions.2022)
#rename Ireland State
SocialClassSourceTable$CSO.Electoral.Divisions.2022[SocialClassSourceTable$CSO.Electoral.Divisions.2022 == "Ireland"] <- "State"
#Fix special characters in AC table
SocialClassSourceTableAC$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire|D├║n Laoghaire","Dun Laoghaire", SocialClassSourceTableAC$CSO.Electoral.Divisions.2022)
SocialClassSourceTable <- rbind(SocialClassSourceTable,SocialClassSourceTableAC)
#remove special chars etc
SocialClassSourceTable$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",SocialClassSourceTable$CSO.Electoral.Divisions.2022)
SocialClassSourceTable$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", SocialClassSourceTable$CSO.Electoral.Divisions.2022)
SocialClassSourceTable$CSO.Electoral.Divisions.2022 <- gsub("'","", SocialClassSourceTable$CSO.Electoral.Divisions.2022)
SocialClassSourceTable$CSO.Electoral.Divisions.2022 <- gsub("&","and", SocialClassSourceTable$CSO.Electoral.Divisions.2022)
##################################################HOUSEHOLDS##################################################
#REad ED and AC  table from PXSTat
HouseholdsSourceTable.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T6T3ED/PX/2013/")
HouseholdsSourceTable <- as.data.frame(HouseholdsSourceTable.px)%>%filter(Statistic == "Permanent private households")
HouseholdsSourceTableAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T6T3CTY/PX/2013/")
HouseholdsSourceTableAC<- as.data.frame(HouseholdsSourceTableAC.px)%>%dplyr::rename(CSO.Electoral.Divisions.2022 = "Administrative.Counties")%>%filter(CSO.Electoral.Divisions.2022!="Ireland" & Statistic == "Permanent private households")
#EDs as cahracter for correct join
HouseholdsSourceTable$CSO.Electoral.Divisions.2022<- as.character(HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
#rename Ireland State
HouseholdsSourceTable$CSO.Electoral.Divisions.2022[HouseholdsSourceTable$CSO.Electoral.Divisions.2022 == "Ireland"] <- "State"
#Fix special characters in AC table
HouseholdsSourceTableAC$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire|D├║n Laoghaire","Dun Laoghaire", HouseholdsSourceTableAC$CSO.Electoral.Divisions.2022)
HouseholdsSourceTable <- rbind(HouseholdsSourceTable,HouseholdsSourceTableAC)
HouseholdsSourceTable$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
HouseholdsSourceTable$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
HouseholdsSourceTable$CSO.Electoral.Divisions.2022 <- gsub("'","", HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
HouseholdsSourceTable$CSO.Electoral.Divisions.2022 <- gsub("&","and", HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
#REad ED and AC  table from PXSTat
HouseholdsSourceTable.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T6T3ED/PX/2013/")
HouseholdsSourceTable <- as.data.frame(HouseholdsSourceTable.px)%>%filter(Statistic == "Permanent private households")
HouseholdsSourceTableAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T6T3CTY/PX/2013/")
HouseholdsSourceTableAC<- as.data.frame(HouseholdsSourceTableAC.px)%>%dplyr::rename(CSO.Electoral.Divisions.2022 = "Administrative.Counties")%>%filter(CSO.Electoral.Divisions.2022!="Ireland" & Statistic == "Permanent private households")
#EDs as cahracter for correct join
HouseholdsSourceTable$CSO.Electoral.Divisions.2022<- as.character(HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
#rename Ireland State
HouseholdsSourceTable$CSO.Electoral.Divisions.2022[HouseholdsSourceTable$CSO.Electoral.Divisions.2022 == "Ireland"] <- "State"
#Fix special characters in AC table
HouseholdsSourceTableAC$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire|D├║n Laoghaire","Dun Laoghaire", HouseholdsSourceTableAC$CSO.Electoral.Divisions.2022)
HouseholdsSourceTable <- rbind(HouseholdsSourceTable,HouseholdsSourceTableAC)
HouseholdsSourceTable$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
HouseholdsSourceTable$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
HouseholdsSourceTable$CSO.Electoral.Divisions.2022 <- gsub("'","", HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
HouseholdsSourceTable$CSO.Electoral.Divisions.2022 <- gsub("&","and", HouseholdsSourceTable$CSO.Electoral.Divisions.2022)
#################################RENEWABLE ENERGY################################
#REad ED and AC  table from PXSTat
RenewableEnergySourceTable.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T6T10ED/PX/2013/")
RenewableEnergySourceTable <- as.data.frame(RenewableEnergySourceTable.px)
RenewableEnergySourceTableAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T6T10CTY/PX/2013/")
#removing ireland as this is already in the EDtable
RenewableEnergySourceTableAC <- as.data.frame(RenewableEnergySourceTableAC.px)%>%dplyr::rename(CSO.Electoral.Divisions.2022 = "Administrative.Counties")%>%filter(CSO.Electoral.Divisions.2022!="Ireland")
#EDs as cahracter for correct join
RenewableEnergySourceTable$CSO.Electoral.Divisions.2022<- as.character(RenewableEnergySourceTable$CSO.Electoral.Divisions.2022)
#rename Ireland State
RenewableEnergySourceTable$CSO.Electoral.Divisions.2022[RenewableEnergySourceTable$CSO.Electoral.Divisions.2022 == "Ireland"] <- "State"
#Fix special characters in AC table
RenewableEnergySourceTableAC$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire|D├║n Laoghaire","Dun Laoghaire", RenewableEnergySourceTableAC$CSO.Electoral.Divisions.2022)
RenewableEnergySourceTable <- rbind(RenewableEnergySourceTable,RenewableEnergySourceTableAC)
#remove special chars etc
RenewableEnergySourceTable$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",RenewableEnergySourceTable$CSO.Electoral.Divisions.2022)
RenewableEnergySourceTable$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", RenewableEnergySourceTable$CSO.Electoral.Divisions.2022)
RenewableEnergySourceTable$CSO.Electoral.Divisions.2022 <- gsub("'","", RenewableEnergySourceTable$CSO.Electoral.Divisions.2022)
RenewableEnergySourceTable$CSO.Electoral.Divisions.2022 <- gsub("&","and", RenewableEnergySourceTable$CSO.Electoral.Divisions.2022)
######################################TRAVEL#########################################
#REad ED and AC  table from PXSTat
TravelSourceTable.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T11T1ED/PX/2013/")
TravelSourceTable <- as.data.frame(TravelSourceTable.px)%>%filter(Statistic == "Usually resident by means of travel to work, school, college or childcare (total)")
TravelSourceTableAC.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T11T1CTY/PX/2013/")
#removing ireland as this is already in the EDtable
TravelSourceTableAC <- as.data.frame(TravelSourceTableAC.px)%>%dplyr::rename(CSO.Electoral.Divisions.2022 = "Administrative.Counties.2019")%>%filter(CSO.Electoral.Divisions.2022!="Ireland" & Statistic == "Usually resident by means of travel to work, school, college or childcare (total)")
#EDs as cahracter for correct join
TravelSourceTable$CSO.Electoral.Divisions.2022<- as.character(TravelSourceTable$CSO.Electoral.Divisions.2022)
#rename Ireland State
TravelSourceTable$CSO.Electoral.Divisions.2022[TravelSourceTable$CSO.Electoral.Divisions.2022 == "Ireland"] <- "State"
#Fix special characters in AC table
TravelSourceTableAC$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire|D├║n Laoghaire","Dun Laoghaire Rathdown County Council", TravelSourceTableAC$CSO.Electoral.Divisions.2022)
TravelSourceTable <- rbind(TravelSourceTable,TravelSourceTableAC)
#remove special chars etc
TravelSourceTable$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",TravelSourceTable$CSO.Electoral.Divisions.2022)
TravelSourceTable$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", TravelSourceTable$CSO.Electoral.Divisions.2022)
TravelSourceTable$CSO.Electoral.Divisions.2022 <- gsub("'","", TravelSourceTable$CSO.Electoral.Divisions.2022)
TravelSourceTable$CSO.Electoral.Divisions.2022 <- gsub("&","and", TravelSourceTable$CSO.Electoral.Divisions.2022)
############################KEY POINTS AND OTHER CALCS#####################################
#key points stats - names used here should be self explanatory
Area.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/F1011/PX/2013/")
Area <- as.data.frame(Area.px)
Area$Electoral.Divisions <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",Area$Electoral.Divisions)
Area$Electoral.Divisions <- gsub("D├║n Laoghaire","Dun Laoghaire", Area$Electoral.Divisions)
Area$Electoral.Divisions<- gsub("'","", Area$Electoral.Divisions)
Area$Electoral.Divisions<- gsub("&","and", Area$Electoral.Divisions)
FamiliesInPrivateHouseholds.px <- read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T4T1ED/PX/2013/")
FamiliesInPrivateHouseholds <- as.data.frame(FamiliesInPrivateHouseholds.px)
FamiliesInPrivateHouseholds$CSO.Electoral.Divisions.2022 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",FamiliesInPrivateHouseholds$CSO.Electoral.Divisions.2022)
FamiliesInPrivateHouseholds$CSO.Electoral.Divisions.2022 <- gsub("D├║n Laoghaire","Dun Laoghaire", FamiliesInPrivateHouseholds$CSO.Electoral.Divisions.2022)
FamiliesInPrivateHouseholds$CSO.Electoral.Divisions.2022 <- gsub("'","", FamiliesInPrivateHouseholds$CSO.Electoral.Divisions.2022)
FamiliesInPrivateHouseholds$CSO.Electoral.Divisions.2022 <- gsub("&","and", FamiliesInPrivateHouseholds$CSO.Electoral.Divisions.2022)
#########################################SAPS###################################
# import SAPS files and SAPS Glossary
SAPSED <- read.csv(paste0(InputFilesLoc,"/SAPS2022/SAPS_2022_CSOED3270923.csv"), header = T)
SAPSCounty <- read.csv(paste0(InputFilesLoc,"/SAPS2022/SAPS_2022_county_270923.csv"), header = T)
SAPSGlossary<- read.csv(paste0(InputFilesLoc,"/SAPS2022/GlossaryEditForPercentages.csv"), header = T)
SAPSTotal <- rbind(SAPSED,SAPSCounty)
for (j in 1:nrow(SAPSGlossary)) {
# Get the column name and total column name from the csv
ColumnName <- SAPSGlossary$ColName[j]
TotalColumnName <- SAPSGlossary$TotalColForPerc[j]
# Create a new column name with "perc" appended
NewColumnName <- paste0(ColumnName, "_Perc")
# Calculate the new column
SAPSTotal <- SAPSTotal %>%
dplyr::mutate({{NewColumnName }} := get(ColumnName)*100 / get(TotalColumnName))
}
# new_col will be added to main_df for each iteration
SAPSPercentages <- SAPSTotal%>%dplyr::select(matches("_Perc"))
SAPSPercentages$GUID <- SAPSTotal$GUID
colnames(SAPSPercentages) <- gsub("_Perc","", colnames(SAPSPercentages))
# round the percentages to one decimal place
SAPSPercentages <- SAPSPercentages%>%mutate_if(is.numeric, function(x) round(x,1))
# Select the appropriate ED,AC and State from the SAPS percentages file
SAPSPercentages <- SAPSPercentages[!duplicated(SAPSPercentages$GUID),]
SAPSPercentages$ED <- SAPSTotal$GEOGDESC
# Select the appropriate ED,AC and State from the SAPS percentages file
SAPSPercentages <- SAPSPercentages[!duplicated(SAPSPercentages$GUID),]
SAPSTotal <- SAPSTotal[!duplicated(SAPSPTotal$GUID),]
SAPSTotal <- SAPSTotal[!duplicated(SAPSTotal$GUID),]
SAPSPercentages$ED <- SAPSTotal$GEOGDESC
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
EDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/"))$CSO.Electoral.Divisions.2022)
EDList <- as.data.frame(EDList)
colnames(EDList)[1] <- "ED"
#Create list of ED GUIDs
GUIDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/"), use.codes = T)$CSO.Electoral.Divisions.2022)
GUIDList <- as.data.frame(GUIDList)
colnames(GUIDList)[1] <- "GUID"
#Create EDs df W GUIDs and remove special chars
EDWGUID <- EDList
EDWGUID$GUID <- GUIDList$GUID
EDWGUID$ED <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",EDWGUID$ED)
EDWGUID$ED <- gsub("D├║n Laoghaire","Dun Laoghaire", EDWGUID$ED)
EDWGUID$ED <- gsub("'","", EDWGUID$ED)
EDWGUID$ED <- gsub("&","and", EDWGUID$ED)
#List of ACs and associated GUIDs
ACListStart <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/"))
ACGUIDList <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/"),use.codes=T)
ACListStart$GUID <- ACGUIDList$Administrative.Counties.2019
ACList <- ACListStart%>%dplyr::select(Administrative.Counties.2019, GUID)
ACList <- ACList[!duplicated(ACList[,c("Administrative.Counties.2019", "GUID")]),]
# Remove special chars in AC Names
ACList$Administrative.Counties.2019 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("D├║n Laoghaire","Dun Laoghaire", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("'","", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("&","and", ACList$Administrative.Counties.2019)
#Lookup table from ED to AC and replacing of special chars
EDACLookup <- as.data.frame(read.csv(paste0(InputFilesLoc,"/EDACLookupFinal.csv")))%>%select(ED_GUID,AC)
EDACLookup$AC <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire", EDACLookup$AC)
EDACLookup$AC <- gsub("D├║n Laoghaire","Dun Laoghaire", EDACLookup$AC)
EDACLookup$AC <- gsub("'","", EDACLookup$AC)
EDACLookup$AC <- gsub("&","and", EDACLookup$AC)
# Create combined dataframe of EDs GUIDs and ACs
# also creates lower case names of EDs and ACs with dashes instead of spaces so they can be used for filenames
EDWGUIDAC <- merge(EDWGUID,EDACLookup, by.x = "GUID", by.y = "ED_GUID")
EDWGUIDAC$EDLC <- make.names(tolower(EDWGUIDAC$ED))
EDWGUIDAC$EDLC <- gsub(".","-",EDWGUIDAC$EDLC, fixed = T)
EDWGUIDAC$ACLC <- make.names(tolower(EDWGUIDAC$AC))
EDWGUIDAC$ACLC <- gsub(".","-",EDWGUIDAC$ACLC, fixed = T)
EDWGUIDAC$GUIDLC <- tolower(EDWGUIDAC$GUID)
#Create CSV For HTML Table and EDsearch tool with links to each file
CSVForHTML <- EDWGUIDAC%>%select(ED,GUID,AC,EDLC,ACLC,GUIDLC)
CSVForHTML$ReportNumber <- 1:nrow(CSVForHTML)
#add links for html and pdf reports
CSVForHTML$Report <- paste0("<a href=\".\\reports\\html\\",CSVForHTML$ReportNumber,"--csohealthprofile--edname--",CSVForHTML$EDLC,"--acname--",CSVForHTML$ACLC,"--edguid--",CSVForHTML$GUIDLC,".html","\"", " target=\"_blank\"", ">","HTML","</a>", "  ",
"<a href=\".\\reports\\pdf\\",CSVForHTML$ReportNumber,"--csohealthprofile--edname--",CSVForHTML$EDLC,"--acname--",CSVForHTML$ACLC,"--edguid--",CSVForHTML$GUIDLC,".pdf","\"", " target=\"_blank\"", ">","PDF","</a>"  )
CSVForHTML <- CSVForHTML%>%select(ED,AC,Report, GUID)
write.csv(CSVForHTML, file = paste0(OutputFilesLoc, "/CSVForHTML.csv"), row.names = F)
# #sample dataset if running tests
Sample <- sample(1:nrow(EDWGUIDAC),2)
EDWGUIDAC <- EDWGUIDAC[Sample,]
# Read and Format PX Stat Files
source(paste0(getwd(),"/scripts/1_ReadAndFormatPXStatAndSAPS.R"))
# create an empty list for errors, to be filled later
ErrorList <- list()
# Loop through every file in the process for every ED
for (i in 1:nrow(EDWGUIDAC))  {
setwd(RootWD)
#skip to next controls whether an iteration should be skipped if there is an error(if SkipToNext == TRUE)
SkipToNext <- FALSE
tryCatch({
#Select the appropriate, ED, AC and map link
ED <- as.character(EDWGUIDAC$ED[i])
EDGUID <- as.character(EDWGUIDAC$GUID[i])
EDGUIDLC <- as.character(EDWGUIDAC$GUIDLC[i])
EDLC <- as.character(EDWGUIDAC$EDLC[i])
AC <- EDWGUIDAC$AC[i]
ACGUID <- ACList$GUID[ACList$Administrative.Counties.2019 == AC]
ACLC <- as.character(EDWGUIDAC$ACLC[i])
#Create a truncated version of ED so that tables and plots remain consistent
EDForTables <- str_trunc(ED, 25)
EDForTables <- str_replace_all(EDForTables, "[^[:alnum:]]\\,", " ")
EDName <- make.names(ED)
EDName <- gsub("\\.","-", EDName)
#Create a truncated version of AC so that tables and plots remain consistent
ACForTables <- str_trunc(AC, 25)
ACForTables <- str_replace_all(ACForTables, "[^[:alnum:]]\\,", " ")
ACForTablesShort <- str_trunc(AC, 15)
ACForTablesShort <- str_replace_all(ACForTablesShort , "[^[:alnum:]]\\,", " ")
ACName <- make.names(AC)
ACName <-  gsub("\\.","-", ACName)
# Title for the markdown/html
TitleForRMD <- paste0("Electoral Division Health Profile - ", ED)
# link to map for ED
EDMapLink <- paste0("../inputs/exportededmaps/",EDGUID,".jpg")
# Run through Subfiles
source(paste0(getwd(),"/scripts/2_Population.R"))
source(paste0(getwd(),"/scripts/3_Carers.R"))
source(paste0(getwd(),"/scripts/4_GeneralHealth.R"))
source(paste0(getwd(),"/scripts/5_Disability.R"))
source(paste0(getwd(),"/scripts/6_Smoking.R"))
source(paste0(getwd(),"/scripts/7_Education.R"))
source(paste0(getwd(),"/scripts/8_PrincipleEconomicStatus.R"))
source(paste0(getwd(),"/scripts/9_Families.R"))
source(paste0(getwd(),"/scripts/10_Birthplace.R"))
source(paste0(getwd(),"/scripts/11_Volunteering.R"))
source(paste0(getwd(),"/scripts/12_SocialClass.R"))
source(paste0(getwd(),"/scripts/13_Households.R"))
source(paste0(getwd(),"/scripts/14_RenewableEnergy.R"))
source(paste0(getwd(),"/scripts/15_Travel.R"))
source(paste0(getwd(),"/scripts/16_KeyPointsAndOtherCalcs.R"))
source(paste0(getwd(),"/scripts/17_SAPS.R"))
setwd(paste0(getwd(),"/scripts"))
#Create the .RNW file using sweave for compiling
Sweave("HealthProfileTemplate.Rnw",output=paste0(i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".tex"))
#Compile the .rnw with Latex
tools::texi2pdf(paste0(i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".tex"))
tools::texi2pdf(paste0(i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".tex"))
#EDProfile pdf Link for RMD
EDLinkPDF<- paste0("<font size=\"5\"><a href=\"..\\pdf\\",i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".pdf\""," style=\"text-decoration: none\">A more detailed and print friendly pdf profile - with accompanying tables - is available here.</a></font>")
#render R Markdown
rmarkdown::render("HealthProfileMarkdown.Rmd", output_file =paste0(i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".html"))
# print progress
print(paste0("Iteration ", i, " of ", nrow(EDWGUIDAC), " complete(",round(i*100/nrow(EDWGUIDAC),1),"%)"))
# log errors
}, error = function(e) {
ErrorMessage <- paste0("Error in Iteration _", i ,"_: for ED -",ED,"- ", conditionMessage(e))
ErrorList <<- c(ErrorList,ErrorMessage)
SkipToNext <<-TRUE
}
)
#if SkipToNext is TRUE, skip to next iteration
if(SkipToNext) { next }
}
# Create the ED search map
source(paste0(getwd(),"/19_EDSearchTool.R"))
print(ErrorList)
#write a csv of errors
write.csv(as.data.frame(ErrorList), file = paste0(OutputFilesLoc,"/ErrorList.csv"))
#setWD so if rerunning runs correctly
setwd(RootWD)
library(tidyverse)
library(stringr)
library(ggplot2)
library(tidyr)
library(pxR)
library(dplyr)
library(webshot)
library(htmlwidgets)
library(lubridate)
library(stringi)
TodaysDate <- format(Sys.Date(), "%d/%m/%Y")
TodayForJSONLD <- format(Sys.Date(), "%Y/%m/%d/")
#set up working directory, input and output folders.
RootWD <- getwd()
setwd(RootWD)
InputFilesLoc <- file.path(RootWD, "inputs")
OutputFilesLoc <- file.path(RootWD, "outputs")
# Set seed so that when running on a sample of files,given samples don't change between runs
set.seed(123456)
#Create Lists of EDs
EDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/"))$CSO.Electoral.Divisions.2022)
EDList <- as.data.frame(EDList)
colnames(EDList)[1] <- "ED"
#Create list of ED GUIDs
GUIDList <- unique(as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1AED/PX/2013/"), use.codes = T)$CSO.Electoral.Divisions.2022)
GUIDList <- as.data.frame(GUIDList)
colnames(GUIDList)[1] <- "GUID"
#Create EDs df W GUIDs and remove special chars
EDWGUID <- EDList
EDWGUID$GUID <- GUIDList$GUID
EDWGUID$ED <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",EDWGUID$ED)
EDWGUID$ED <- gsub("D├║n Laoghaire","Dun Laoghaire", EDWGUID$ED)
EDWGUID$ED <- gsub("'","", EDWGUID$ED)
EDWGUID$ED <- gsub("&","and", EDWGUID$ED)
#List of ACs and associated GUIDs
ACListStart <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/"))
ACGUIDList <- as.data.frame(read.px("https://ws.cso.ie/public/api.restful/PxStat.Data.Cube_API.ReadDataset/SAP2022T1T1ACTY/PX/2013/"),use.codes=T)
ACListStart$GUID <- ACGUIDList$Administrative.Counties.2019
ACList <- ACListStart%>%dplyr::select(Administrative.Counties.2019, GUID)
ACList <- ACList[!duplicated(ACList[,c("Administrative.Counties.2019", "GUID")]),]
# Remove special chars in AC Names
ACList$Administrative.Counties.2019 <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire",ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("D├║n Laoghaire","Dun Laoghaire", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("'","", ACList$Administrative.Counties.2019)
ACList$Administrative.Counties.2019 <- gsub("&","and", ACList$Administrative.Counties.2019)
#Lookup table from ED to AC and replacing of special chars
EDACLookup <- as.data.frame(read.csv(paste0(InputFilesLoc,"/EDACLookupFinal.csv")))%>%select(ED_GUID,AC)
EDACLookup$AC <- gsub("Dâ”œâ•‘n Laoghaire","Dun Laoghaire", EDACLookup$AC)
EDACLookup$AC <- gsub("D├║n Laoghaire","Dun Laoghaire", EDACLookup$AC)
EDACLookup$AC <- gsub("'","", EDACLookup$AC)
EDACLookup$AC <- gsub("&","and", EDACLookup$AC)
# Create combined dataframe of EDs GUIDs and ACs
# also creates lower case names of EDs and ACs with dashes instead of spaces so they can be used for filenames
EDWGUIDAC <- merge(EDWGUID,EDACLookup, by.x = "GUID", by.y = "ED_GUID")
EDWGUIDAC$EDLC <- make.names(tolower(EDWGUIDAC$ED))
EDWGUIDAC$EDLC <- gsub(".","-",EDWGUIDAC$EDLC, fixed = T)
EDWGUIDAC$ACLC <- make.names(tolower(EDWGUIDAC$AC))
EDWGUIDAC$ACLC <- gsub(".","-",EDWGUIDAC$ACLC, fixed = T)
EDWGUIDAC$GUIDLC <- tolower(EDWGUIDAC$GUID)
#Create CSV For HTML Table and EDsearch tool with links to each file
CSVForHTML <- EDWGUIDAC%>%select(ED,GUID,AC,EDLC,ACLC,GUIDLC)
CSVForHTML$ReportNumber <- 1:nrow(CSVForHTML)
#add links for html and pdf reports
CSVForHTML$Report <- paste0("<a href=\".\\reports\\html\\",CSVForHTML$ReportNumber,"--csohealthprofile--edname--",CSVForHTML$EDLC,"--acname--",CSVForHTML$ACLC,"--edguid--",CSVForHTML$GUIDLC,".html","\"", " target=\"_blank\"", ">","HTML","</a>", "  ",
"<a href=\".\\reports\\pdf\\",CSVForHTML$ReportNumber,"--csohealthprofile--edname--",CSVForHTML$EDLC,"--acname--",CSVForHTML$ACLC,"--edguid--",CSVForHTML$GUIDLC,".pdf","\"", " target=\"_blank\"", ">","PDF","</a>"  )
CSVForHTML <- CSVForHTML%>%select(ED,AC,Report, GUID)
write.csv(CSVForHTML, file = paste0(OutputFilesLoc, "/CSVForHTML.csv"), row.names = F)
# #sample dataset if running tests
# Sample <- sample(1:nrow(EDWGUIDAC),2)
# EDWGUIDAC <- EDWGUIDAC[Sample,]
# Read and Format PX Stat Files
source(paste0(getwd(),"/scripts/1_ReadAndFormatPXStat.R"))
# calculate SAPS Percentages
source(paste0(getwd(),"/scripts/2_SAPSPercentages.R"))
# create an empty list for errors, to be filled later
ErrorList <- list()
# Loop through every file in the process for every ED
for (i in 1:nrow(EDWGUIDAC))  {
setwd(RootWD)
#skip to next controls whether an iteration should be skipped if there is an error(if SkipToNext == TRUE)
SkipToNext <- FALSE
tryCatch({
#Select the appropriate, ED, AC and map link
ED <- as.character(EDWGUIDAC$ED[i])
EDGUID <- as.character(EDWGUIDAC$GUID[i])
EDGUIDLC <- as.character(EDWGUIDAC$GUIDLC[i])
EDLC <- as.character(EDWGUIDAC$EDLC[i])
AC <- EDWGUIDAC$AC[i]
ACGUID <- ACList$GUID[ACList$Administrative.Counties.2019 == AC]
ACLC <- as.character(EDWGUIDAC$ACLC[i])
#Create a truncated version of ED so that tables and plots remain consistent
EDForTables <- str_trunc(ED, 25)
EDForTables <- str_replace_all(EDForTables, "[^[:alnum:]]\\,", " ")
EDName <- make.names(ED)
EDName <- gsub("\\.","-", EDName)
#Create a truncated version of AC so that tables and plots remain consistent
ACForTables <- str_trunc(AC, 25)
ACForTables <- str_replace_all(ACForTables, "[^[:alnum:]]\\,", " ")
ACForTablesShort <- str_trunc(AC, 15)
ACForTablesShort <- str_replace_all(ACForTablesShort , "[^[:alnum:]]\\,", " ")
ACName <- make.names(AC)
ACName <-  gsub("\\.","-", ACName)
# Title for the markdown/html
TitleForRMD <- paste0("Electoral Division Health Profile - ", ED)
# link to map for ED
EDMapLink <- paste0("../inputs/exportededmaps/",EDGUID,".jpg")
# Run through Subfiles
source(paste0(getwd(),"/scripts/3_Population.R"))
source(paste0(getwd(),"/scripts/4_Carers.R"))
source(paste0(getwd(),"/scripts/5_GeneralHealth.R"))
source(paste0(getwd(),"/scripts/6_Disability.R"))
source(paste0(getwd(),"/scripts/7_Smoking.R"))
source(paste0(getwd(),"/scripts/8_Education.R"))
source(paste0(getwd(),"/scripts/9_PrincipleEconomicStatus.R"))
source(paste0(getwd(),"/scripts/10_Families.R"))
source(paste0(getwd(),"/scripts/11_Birthplace.R"))
source(paste0(getwd(),"/scripts/12_Volunteering.R"))
source(paste0(getwd(),"/scripts/13_SocialClass.R"))
source(paste0(getwd(),"/scripts/14_Households.R"))
source(paste0(getwd(),"/scripts/15_RenewableEnergy.R"))
source(paste0(getwd(),"/scripts/16_Travel.R"))
source(paste0(getwd(),"/scripts/17_KeyPointsAndOtherCalcs.R"))
source(paste0(getwd(),"/scripts/18_SAPS.R"))
setwd(paste0(getwd(),"/scripts"))
#Create the .RNW file using sweave for compiling
Sweave("HealthProfileTemplate.Rnw",output=paste0(i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".tex"))
#Compile the .rnw with Latex
tools::texi2pdf(paste0(i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".tex"))
tools::texi2pdf(paste0(i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".tex"))
#EDProfile pdf Link for RMD
EDLinkPDF<- paste0("<font size=\"5\"><a href=\"..\\pdf\\",i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".pdf\""," style=\"text-decoration: none\">A more detailed and print friendly pdf profile - with accompanying tables - is available here.</a></font>")
#render R Markdown
rmarkdown::render("HealthProfileMarkdown.Rmd", output_file =paste0(i,"--csohealthprofile--edname--",EDLC,"--acname--",ACLC,"--edguid--",EDGUIDLC,".html"))
# print progress
print(paste0("Iteration ", i, " of ", nrow(EDWGUIDAC), " complete(",round(i*100/nrow(EDWGUIDAC),1),"%)"))
# log errors
}, error = function(e) {
ErrorMessage <- paste0("Error in Iteration _", i ,"_: for ED -",ED,"- ", conditionMessage(e))
ErrorList <<- c(ErrorList,ErrorMessage)
SkipToNext <<-TRUE
}
)
#if SkipToNext is TRUE, skip to next iteration
if(SkipToNext) { next }
}
